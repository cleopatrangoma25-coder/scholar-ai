{"version":3,"sources":["../src/schemas.ts","../src/utils.ts"],"sourcesContent":["import { z } from \"zod\";\r\n\r\n// Paper schemas\r\nexport const getUploadUrlSchema = z.object({\r\n  fileName: z.string().min(1, \"File name is required\"),\r\n  contentType: z.string().min(1, \"Content type is required\"),\r\n});\r\n\r\nexport const paperSchema = z.object({\r\n  paperId: z.string(),\r\n  ownerUid: z.string(),\r\n  title: z.string(),\r\n  authors: z.array(z.string()),\r\n  storagePath: z.string(),\r\n  status: z.enum([\"processing\", \"completed\", \"failed\"]),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n});\r\n\r\n// RAG query schemas\r\nexport const queryScopeSchema = z.enum([\"private\", \"public\", \"all\"]);\r\n\r\nexport const ragQuerySchema = z.object({\r\n  query: z.string().min(1, \"Query is required\"),\r\n  scope: queryScopeSchema,\r\n});\r\n\r\nexport const sourceSchema = z.object({\r\n  paperId: z.string(),\r\n  title: z.string(),\r\n  authors: z.array(z.string()),\r\n  pageNumber: z.number().optional(),\r\n  content: z.string(),\r\n  score: z.number(),\r\n});\r\n\r\nexport const ragResponseSchema = z.object({\r\n  answer: z.string(),\r\n  sources: z.array(sourceSchema),\r\n});\r\n\r\n// User schemas\r\nexport const userSchema = z.object({\r\n  uid: z.string(),\r\n  email: z.string().email(),\r\n  name: z.string().optional(),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n});\r\n\r\n// Export types\r\nexport type GetUploadUrlInput = z.infer<typeof getUploadUrlSchema>;\r\nexport type Paper = z.infer<typeof paperSchema>;\r\nexport type QueryScope = z.infer<typeof queryScopeSchema>;\r\nexport type RagQueryInput = z.infer<typeof ragQuerySchema>;\r\nexport type Source = z.infer<typeof sourceSchema>;\r\nexport type RagResponse = z.infer<typeof ragResponseSchema>;\r\nexport type User = z.infer<typeof userSchema>; ","import { z } from \"zod\";\r\n\r\n/**\r\n * Creates a type-safe error object for tRPC\r\n */\r\nexport function createTRPCError(\r\n  code: \"UNAUTHORIZED\" | \"NOT_FOUND\" | \"BAD_REQUEST\" | \"INTERNAL_SERVER_ERROR\",\r\n  message: string\r\n) {\r\n  return {\r\n    code,\r\n    message,\r\n  };\r\n}\r\n\r\n/**\r\n * Validates environment variables using Zod\r\n */\r\nexport function validateEnv<T extends z.ZodTypeAny>(\r\n  schema: T,\r\n  env: Record<string, string | undefined>\r\n): z.infer<T> {\r\n  try {\r\n    return schema.parse(env);\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      const missingVars = error.errors.map((err) => err.path.join(\".\")).join(\", \");\r\n      throw new Error(`Missing or invalid environment variables: ${missingVars}`);\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Generates a unique ID for papers\r\n */\r\nexport function generatePaperId(): string {\r\n  return `paper_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\n/**\r\n * Formats authors array into a readable string\r\n */\r\nexport function formatAuthors(authors: string[]): string {\r\n  if (authors.length === 0) return \"Unknown\";\r\n  if (authors.length === 1) return authors[0];\r\n  if (authors.length === 2) return `${authors[0]} and ${authors[1]}`;\r\n  return `${authors.slice(0, -1).join(\", \")}, and ${authors[authors.length - 1]}`;\r\n} "],"mappings":";AAAA,SAAS,SAAS;AAGX,IAAM,qBAAqB,EAAE,OAAO;AAAA,EACzC,UAAU,EAAE,OAAO,EAAE,IAAI,GAAG,uBAAuB;AAAA,EACnD,aAAa,EAAE,OAAO,EAAE,IAAI,GAAG,0BAA0B;AAC3D,CAAC;AAEM,IAAM,cAAc,EAAE,OAAO;AAAA,EAClC,SAAS,EAAE,OAAO;AAAA,EAClB,UAAU,EAAE,OAAO;AAAA,EACnB,OAAO,EAAE,OAAO;AAAA,EAChB,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC3B,aAAa,EAAE,OAAO;AAAA,EACtB,QAAQ,EAAE,KAAK,CAAC,cAAc,aAAa,QAAQ,CAAC;AAAA,EACpD,WAAW,EAAE,KAAK;AAAA,EAClB,WAAW,EAAE,KAAK;AACpB,CAAC;AAGM,IAAM,mBAAmB,EAAE,KAAK,CAAC,WAAW,UAAU,KAAK,CAAC;AAE5D,IAAM,iBAAiB,EAAE,OAAO;AAAA,EACrC,OAAO,EAAE,OAAO,EAAE,IAAI,GAAG,mBAAmB;AAAA,EAC5C,OAAO;AACT,CAAC;AAEM,IAAM,eAAe,EAAE,OAAO;AAAA,EACnC,SAAS,EAAE,OAAO;AAAA,EAClB,OAAO,EAAE,OAAO;AAAA,EAChB,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC3B,YAAY,EAAE,OAAO,EAAE,SAAS;AAAA,EAChC,SAAS,EAAE,OAAO;AAAA,EAClB,OAAO,EAAE,OAAO;AAClB,CAAC;AAEM,IAAM,oBAAoB,EAAE,OAAO;AAAA,EACxC,QAAQ,EAAE,OAAO;AAAA,EACjB,SAAS,EAAE,MAAM,YAAY;AAC/B,CAAC;AAGM,IAAM,aAAa,EAAE,OAAO;AAAA,EACjC,KAAK,EAAE,OAAO;AAAA,EACd,OAAO,EAAE,OAAO,EAAE,MAAM;AAAA,EACxB,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,WAAW,EAAE,KAAK;AAAA,EAClB,WAAW,EAAE,KAAK;AACpB,CAAC;;;AChDD,SAAS,KAAAA,UAAS;AAKX,SAAS,gBACd,MACA,SACA;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAKO,SAAS,YACd,QACA,KACY;AACZ,MAAI;AACF,WAAO,OAAO,MAAM,GAAG;AAAA,EACzB,SAAS,OAAO;AACd,QAAI,iBAAiBA,GAAE,UAAU;AAC/B,YAAM,cAAc,MAAM,OAAO,IAAI,CAAC,QAAQ,IAAI,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI;AAC3E,YAAM,IAAI,MAAM,6CAA6C,WAAW,EAAE;AAAA,IAC5E;AACA,UAAM;AAAA,EACR;AACF;AAKO,SAAS,kBAA0B;AACxC,SAAO,SAAS,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AACvE;AAKO,SAAS,cAAc,SAA2B;AACvD,MAAI,QAAQ,WAAW,EAAG,QAAO;AACjC,MAAI,QAAQ,WAAW,EAAG,QAAO,QAAQ,CAAC;AAC1C,MAAI,QAAQ,WAAW,EAAG,QAAO,GAAG,QAAQ,CAAC,CAAC,QAAQ,QAAQ,CAAC,CAAC;AAChE,SAAO,GAAG,QAAQ,MAAM,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,SAAS,QAAQ,QAAQ,SAAS,CAAC,CAAC;AAC/E;","names":["z"]}